#!/usr/bin/env python3
"""
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GigaChat –∫–ª–∏–µ–Ω—Ç –¥–ª—è web-—Å–µ—Ä–≤–∏—Å–∞

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

import os
import requests
import json
import logging
from typing import Optional, Dict, List, Any
from datetime import datetime

from config import config

logger = logging.getLogger(__name__)

class GigaChatService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat"""
    
    def __init__(self):
        self.client = None
        self.is_available = False
        self.base_url = config.GIGACHAT_BASE_URL
        self.cert_path = config.MTLS_CLIENT_CERT
        self.key_path = config.MTLS_CLIENT_KEY
        self.verify_ssl = config.MTLS_VERIFY_SSL
        self._initialize_client()
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ GigaChat"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            if not os.path.exists(self.cert_path) or not os.path.exists(self.key_path):
                logger.warning(f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã GigaChat –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {self.cert_path}, {self.key_path}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            with open(self.cert_path, 'r') as f:
                cert_content = f.read()
                if "# Certificate Placeholder" in cert_content:
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
                    return
            
            with open(self.key_path, 'r') as f:
                key_content = f.read()
                if "# Private Key Placeholder" in key_content:
                    logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ –∫–ª—é—á–∞")
                    return
            
            self.is_available = True
            logger.info("‚úÖ GigaChat –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"üîó –ë–∞–∑–æ–≤—ã–π URL: {self.base_url}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
            self.is_available = False
    
    def check_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GigaChat"""
        return self.is_available
    
    def _make_request(self, endpoint: str, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API"""
        try:
            url = f"{self.base_url}/{endpoint.lstrip('/')}"
            
            response = requests.post(
                url,
                json=data,
                cert=(self.cert_path, self.key_path),
                verify=self.verify_ssl,
                timeout=60,
                headers={
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"GigaChat API error: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {e}")
            return None
    
    async def chat_with_context(self, message: str, context: str = "") -> str:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG –±–∞–∑—ã
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç GigaChat
        """
        if not self.check_availability():
            return "‚ùå GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            if context:
                prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
{context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}

–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏."""
            else:
                prompt = f"–í–æ–ø—Ä–æ—Å: {message}\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            request_data = {
                "model": config.DEFAULT_GIGACHAT_MODEL,
                "messages": [
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                "temperature": config.CHAT_TEMPERATURE,
                "max_tokens": config.CHAT_MAX_TOKENS
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            response = self._make_request("chat/completions", request_data)
            
            if response and 'choices' in response and len(response['choices']) > 0:
                return response['choices'][0]['message']['content']
            else:
                return "‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {str(e)}"
    
    async def simple_chat(self, message: str) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ RAG
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç GigaChat
        """
        return await self.chat_with_context(message, "")
    
    def get_available_models(self) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.check_availability():
            return []
        
        models_info = []
        for model in config.GIGACHAT_MODELS["–¥–æ—Å—Ç—É–ø–Ω—ã–µ"]:
            model_info = {
                "name": model,
                "display_name": self._get_model_display_name(model),
                "description": self._get_model_description(model),
                "is_default": model == config.GIGACHAT_MODELS["–ø–æ_—É–º–æ–ª—á–∞–Ω–∏—é"]
            }
            models_info.append(model_info)
        
        return models_info
    
    def _get_model_display_name(self, model_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏"""
        display_names = {
            "GigaChat-2": "GigaChat 2",
            "GigaChat-2-Pro": "GigaChat 2 Pro", 
            "GigaChat-2-Max": "GigaChat 2 Max"
        }
        return display_names.get(model_name, model_name)
    
    def _get_model_description(self, model_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        descriptions = {
            "GigaChat-2": "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
            "GigaChat-2-Pro": "–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            "GigaChat-2-Max": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–æ—â–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        }
        return descriptions.get(model_name, "–ú–æ–¥–µ–ª—å GigaChat")
    
    def set_model(self, model_name: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        if model_name not in config.GIGACHAT_MODELS["–¥–æ—Å—Ç—É–ø–Ω—ã–µ"]:
            logger.warning(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")
            return False
        
        config.DEFAULT_GIGACHAT_MODEL = model_name
        logger.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
        return True
    
    def get_current_model(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        if not self.check_availability():
            return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        return config.DEFAULT_GIGACHAT_MODEL

    def test_embeddings(self, text: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ embedding –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            if not self.client:
                return {"success": False, "error": "–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ embedding API
            data = {
                "model": config.GIGACHAT_EMBEDDING_MODEL,
                "input": [text]
            }
            
            response = self._make_request("embeddings", data)
            
            if response and "data" in response and len(response["data"]) > 0:
                embedding = response["data"][0]["embedding"]
                return {
                    "success": True,
                    "embedding": embedding,
                    "model": config.GIGACHAT_EMBEDDING_MODEL
                }
            else:
                return {
                    "success": False,
                    "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API"
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è embeddings: {e}")
            return {
                "success": False,
                "error": str(e)
            }
