#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ (PDF, DOCX, TXT)

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

import os
import logging
import mimetypes
from typing import Optional, Dict, Any
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
try:
    import PyPDF2
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

try:
    from docx import Document
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å python-magic (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ)
try:
    import magic
    MAGIC_AVAILABLE = True
except ImportError:
    MAGIC_AVAILABLE = False

from config import config

logger = logging.getLogger(__name__)

class FileProcessorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.upload_folder = config.UPLOAD_FOLDER
        self._ensure_upload_folder()
    
    def _ensure_upload_folder(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        os.makedirs(self.upload_folder, exist_ok=True)
    
    def get_file_type(self, file_path: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ libmagic)
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –¢–∏–ø —Ñ–∞–π–ª–∞
        """
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: python-magic (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ò libmagic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            if MAGIC_AVAILABLE:
                try:
                    file_type = magic.from_file(file_path, mime=True)
                    return file_type
                except Exception as magic_error:
                    # libmagic —Å–∏—Å—Ç–µ–º–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                    logger.warning(f"‚ö†Ô∏è python-magic —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ libmagic –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {magic_error}")
                    logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π mimetypes")
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å mimetypes
            mime_type, _ = mimetypes.guess_type(file_path)
            if mime_type:
                logger.debug(f"üìã –¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —á–µ—Ä–µ–∑ mimetypes: {mime_type}")
                return mime_type
                
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            extension = Path(file_path).suffix.lower()
            mime_types = {
                '.pdf': 'application/pdf',
                '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                '.doc': 'application/msword',
                '.txt': 'text/plain',
                '.md': 'text/markdown',
                '.html': 'text/html',
                '.htm': 'text/html'
            }
            detected_type = mime_types.get(extension, 'application/octet-stream')
            logger.debug(f"üìÅ –¢–∏–ø —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {detected_type}")
            return detected_type
            
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            # –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π fallback - –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            extension = Path(file_path).suffix.lower()
            if extension == '.pdf':
                return 'application/pdf'
            elif extension in ['.docx', '.doc']:
                return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            elif extension in ['.txt', '.md']:
                return 'text/plain'
            else:
                return 'application/octet-stream'
    
    def validate_file(self, file_path: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        try:
            if not os.path.exists(file_path):
                return {
                    'valid': False,
                    'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            if file_size > config.MAX_FILE_SIZE:
                return {
                    'valid': False,
                    'error': f'–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.MAX_FILE_SIZE // (1024*1024)} MB'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            file_extension = Path(file_path).suffix.lower().lstrip('.')
            if file_extension not in config.ALLOWED_EXTENSIONS:
                return {
                    'valid': False,
                    'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {", ".join(config.ALLOWED_EXTENSIONS)}'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME —Ç–∏–ø
            file_type = self.get_file_type(file_path)
            
            return {
                'valid': True,
                'file_size': file_size,
                'file_type': file_type,
                'extension': file_extension
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'valid': False,
                'error': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}'
            }
    
    def extract_text_from_pdf(self, file_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        if not PDF_AVAILABLE:
            logger.error("PyPDF2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        try:
            text = ""
            with open(file_path, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                
                for page_num in range(len(pdf_reader.pages)):
                    page = pdf_reader.pages[page_num]
                    text += page.extract_text() + "\n"
            
            return text.strip() if text.strip() else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
            return None
    
    def extract_text_from_docx(self, file_path: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None
        """
        if not DOCX_AVAILABLE:
            logger.error("python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return None
        
        try:
            doc = Document(file_path)
            text = ""
            
            for paragraph in doc.paragraphs:
                text += paragraph.text + "\n"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        text += cell.text + " "
                    text += "\n"
            
            return text.strip() if text.strip() else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
            return None
    
    def extract_text_from_txt(self, file_path: str) -> Optional[str]:
        """
        –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ TXT —Ñ–∞–π–ª—É
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ None
        """
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'cp1251', 'latin-1']
            
            for encoding in encodings:
                try:
                    with open(file_path, 'r', encoding=encoding) as file:
                        content = file.read()
                        return content.strip() if content.strip() else None
                except UnicodeDecodeError:
                    continue
            
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞: {file_path}")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def process_file(self, file_path: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
            validation = self.validate_file(file_path)
            if not validation['valid']:
                return {
                    'success': False,
                    'error': validation['error']
                }
            
            file_extension = validation['extension']
            file_name = Path(file_path).name
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            text_content = None
            
            if file_extension == 'pdf':
                text_content = self.extract_text_from_pdf(file_path)
            elif file_extension in ['docx', 'doc']:
                text_content = self.extract_text_from_docx(file_path)
            elif file_extension == 'txt':
                text_content = self.extract_text_from_txt(file_path)
            
            if not text_content:
                return {
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç'
                }
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = {
                'source': 'file',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                'filename': file_name,
                'file_type': file_extension,
                'file_size': validation['file_size'],
                'title': file_name,
                'processed_at': str(Path(file_path).stat().st_mtime)
            }
            
            return {
                'success': True,
                'content': text_content,
                'metadata': metadata,
                'filename': file_name
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}'
            }
    
    def save_uploaded_file(self, file_content: bytes, filename: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            file_path = os.path.join(self.upload_folder, filename)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
            counter = 1
            original_name, extension = os.path.splitext(filename)
            
            while os.path.exists(file_path):
                new_filename = f"{original_name}_{counter}{extension}"
                file_path = os.path.join(self.upload_folder, new_filename)
                counter += 1
            
            with open(file_path, 'wb') as f:
                f.write(file_content)
            
            logger.info(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return file_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            raise
