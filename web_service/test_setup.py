#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ web-—Å–µ—Ä–≤–∏—Å–∞

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

import os
import sys
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from config import config
        print("‚úÖ config - OK")
    except Exception as e:
        print(f"‚ùå config - FAIL: {e}")
        return False
    
    try:
        from app.services.gigachat_service import GigaChatService
        print("‚úÖ GigaChatService - OK")
    except Exception as e:
        print(f"‚ùå GigaChatService - FAIL: {e}")
        return False
    
    try:
        from app.services.rag_service import RAGService
        print("‚úÖ RAGService - OK")
    except Exception as e:
        print(f"‚ùå RAGService - FAIL: {e}")
        return False
    
    try:
        from app.services.confluence_service import ConfluenceService
        print("‚úÖ ConfluenceService - OK")
    except Exception as e:
        print(f"‚ùå ConfluenceService - FAIL: {e}")
        return False
    
    try:
        from app.services.file_service import FileProcessorService
        print("‚úÖ FileProcessorService - OK")
    except Exception as e:
        print(f"‚ùå FileProcessorService - FAIL: {e}")
        return False
    
    return True

def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    from config import config
    
    print(f"App Name: {config.APP_NAME}")
    print(f"Host: {config.HOST}:{config.PORT}")
    print(f"GigaChat URL: {config.GIGACHAT_BASE_URL}")
    print(f"Cert Path: {config.MTLS_CLIENT_CERT}")
    print(f"Key Path: {config.MTLS_CLIENT_KEY}")
    print(f"GigaChat Embedding Model: {config.GIGACHAT_EMBEDDING_MODEL}")
    print(f"Chroma DB: {config.CHROMA_DB_PATH}")

def test_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    from app.services.gigachat_service import GigaChatService
    from app.services.rag_service import RAGService
    from app.services.confluence_service import ConfluenceService
    from app.services.file_service import FileProcessorService
    
    # GigaChat
    gigachat = GigaChatService()
    print(f"GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω: {gigachat.check_availability()}")
    
    # RAG
    rag = RAGService()
    print(f"RAG –¥–æ—Å—Ç—É–ø–µ–Ω: {rag.check_availability()}")
    
    # Confluence
    confluence = ConfluenceService()
    print("Confluence —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
    
    # File processor
    file_processor = FileProcessorService()
    print("File processor —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
    
    return gigachat, rag, confluence, file_processor

async def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    gigachat, rag, confluence, file_processor = test_services()
    
    # –¢–µ—Å—Ç RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if rag.check_availability():
        stats = rag.get_stats()
        print(f"RAG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –¢–µ—Å—Ç GigaChat (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if gigachat.check_availability():
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GigaChat...")
        try:
            response = await gigachat.simple_chat("–ü—Ä–∏–≤–µ—Ç!")
            print(f"GigaChat –æ—Ç–≤–µ—Ç: {response[:100]}...")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ GigaChat: {e}")

def test_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "storage",
        "storage/chroma_db", 
        "storage/uploads",
        "app/templates",
        "app/static"
    ]
    
    for dir_path in directories:
        if os.path.exists(dir_path):
            print(f"‚úÖ {dir_path} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå {dir_path} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            os.makedirs(dir_path, exist_ok=True)
            print(f"üìÅ {dir_path} - —Å–æ–∑–¥–∞–Ω")

def test_certificates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    
    cert_files = [
        "../certificates/cert.pem",
        "../certificates/key.pem"
    ]
    
    for cert_file in cert_files:
        if os.path.exists(cert_file):
            print(f"‚úÖ {cert_file} - –Ω–∞–π–¥–µ–Ω")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            with open(cert_file, 'r') as f:
                content = f.read()
                if "Placeholder" in content:
                    print(f"‚ö†Ô∏è  {cert_file} - —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞")
                else:
                    print(f"‚úÖ {cert_file} - –≤–∞–ª–∏–¥–Ω—ã–π")
        else:
            print(f"‚ùå {cert_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è web-—Å–µ—Ä–≤–∏—Å–∞...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    test_directories()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    test_certificates()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_imports():
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_config()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    await test_basic_functionality()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –î–æ–±–∞–≤—å—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã GigaChat –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥–æ–π: python main.py")

if __name__ == "__main__":
    asyncio.run(main())
