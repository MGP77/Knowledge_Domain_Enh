#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ChromaDB
"""

import os
import sys
import time
import json
import logging
from datetime import datetime
import schedule

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('.')

from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rag_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def check_rag_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –û–±—Ö–æ–¥ SQLite –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if os.getenv('CHROMA_SQLITE_OVERRIDE') == '1':
            import sqlite3
            sqlite3.sqlite_version = "3.35.0"
        
        import chromadb
        from chromadb.config import Settings
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        client = chromadb.PersistentClient(
            path=config.CHROMA_DB_PATH,
            settings=Settings(
                anonymized_telemetry=False,
                allow_reset=True
            )
        )
        
        collection = client.get_collection(config.CHROMA_COLLECTION_NAME)
        count = collection.count()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            "timestamp": datetime.now().isoformat(),
            "total_documents": count,
            "db_path_exists": os.path.exists(config.CHROMA_DB_PATH),
            "collection_name": config.CHROMA_COLLECTION_NAME
        }
        
        if count > 0:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_data = collection.get(include=["metadatas"])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = {}
            confluence_pages = set()
            uploaded_files = set()
            
            for metadata in all_data['metadatas']:
                source = metadata.get('source', 'unknown')
                timestamp = metadata.get('timestamp', 'unknown')
                
                if source not in sources:
                    sources[source] = 0
                sources[source] += 1
                
                if source == 'confluence':
                    page_id = metadata.get('page_id', 'unknown')
                    confluence_pages.add(page_id)
                elif source == 'file':
                    filename = metadata.get('filename', 'unknown')
                    uploaded_files.add(filename)
            
            stats.update({
                "sources": sources,
                "confluence_pages": len(confluence_pages),
                "uploaded_files": len(uploaded_files)
            })
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"üìä RAG Health Check: {json.dumps(stats, ensure_ascii=False)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        with open('rag_health_history.jsonl', 'a', encoding='utf-8') as f:
            f.write(json.dumps(stats, ensure_ascii=False) + '\n')
        
        return stats
        
    except Exception as e:
        error_stats = {
            "timestamp": datetime.now().isoformat(),
            "error": str(e),
            "status": "error"
        }
        logger.error(f"‚ùå RAG Health Check Error: {json.dumps(error_stats, ensure_ascii=False)}")
        
        with open('rag_health_history.jsonl', 'a', encoding='utf-8') as f:
            f.write(json.dumps(error_stats, ensure_ascii=False) + '\n')
        
        return error_stats

def main():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    schedule.every(5).minutes.do(check_rag_health)
    
    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    check_rag_health()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    except KeyboardInterrupt:
        logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()