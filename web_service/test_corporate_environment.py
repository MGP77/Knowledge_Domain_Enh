#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GigaChat –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã.
"""

import sys
import os
import requests
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')
sys.path.append('./app')

def check_certificates():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ mTLS"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
    
    cert_path = "../certificates/cert.pem"
    key_path = "../certificates/key.pem"
    
    cert_exists = os.path.exists(cert_path)
    key_exists = os.path.exists(key_path)
    
    print(f"üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {cert_path}: {'‚úÖ –ù–∞–π–¥–µ–Ω' if cert_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    print(f"üîë –ö–ª—é—á {key_path}: {'‚úÖ –ù–∞–π–¥–µ–Ω' if key_exists else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    if cert_exists:
        with open(cert_path, 'r') as f:
            cert_content = f.read()
            size = len(cert_content)
            is_placeholder = "# Certificate Placeholder" in cert_content
            print(f"   üìè –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
            print(f"   üè∑Ô∏è –¢–∏–ø: {'–ó–∞–≥–ª—É—à–∫–∞' if is_placeholder else '–†–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'}")
    
    if key_exists:
        with open(key_path, 'r') as f:
            key_content = f.read()
            size = len(key_content)
            is_placeholder = "# Private Key Placeholder" in key_content
            print(f"   üìè –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
            print(f"   üè∑Ô∏è –¢–∏–ø: {'–ó–∞–≥–ª—É—à–∫–∞' if is_placeholder else '–†–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á'}")
    
    return cert_exists and key_exists

def test_gigachat_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat...")
    
    base_url = "https://gigachat-ift.sberdevices.delta.sbrf.ru/v1"
    cert_path = "../certificates/cert.pem"
    key_path = "../certificates/key.pem"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º embedding endpoint
    test_data = {
        "model": "EmbeddingsGigaR",
        "input": ["–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"]
    }
    
    url = f"{base_url}/embeddings"
    
    try:
        print(f"üîó URL: {url}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {test_data['model']}")
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {test_data['input'][0]}")
        
        response = requests.post(
            url,
            json=test_data,
            cert=(cert_path, key_path),
            verify=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã
            timeout=60,
            headers={
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        )
        
        print(f"üì° HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            response_data = response.json()
            if "data" in response_data and len(response_data["data"]) > 0:
                embedding = response_data["data"][0]["embedding"]
                print(f"‚úÖ Embedding –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)}")
                print(f"üî¢ –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
                return True
            else:
                print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response_data}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.SSLError as e:
        print(f"‚ùå SSL –æ—à–∏–±–∫–∞: {e}")
        return False
    except requests.exceptions.ConnectionError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return False
    except requests.exceptions.Timeout as e:
        print(f"‚ùå –¢–∞–π–º-–∞—É—Ç: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_langchain_gigachat():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ langchain-gigachat"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ langchain-gigachat...")
    
    try:
        from langchain_gigachat import GigaChatEmbeddings
        print("‚úÖ langchain-gigachat –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        embeddings = GigaChatEmbeddings(
            model="EmbeddingsGigaR",
            base_url="https://gigachat-ift.sberdevices.delta.sbrf.ru/v1",
            ca_bundle_file=None,
            cert_file="../certificates/cert.pem",
            key_file="../certificates/key.pem",
            verify_ssl_certs=False
        )
        
        print("‚úÖ GigaChatEmbeddings —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ embedding
        test_text = "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è langchain"
        embedding = embeddings.embed_query(test_text)
        
        print(f"‚úÖ Embedding —á–µ—Ä–µ–∑ langchain –ø–æ–ª—É—á–µ–Ω!")
        print(f"üìê –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(embedding)}")
        print(f"üî¢ –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π: {embedding[:5]}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå langchain-gigachat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ langchain-gigachat: {e}")
        return False

def test_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from app.services.gigachat_service import GigaChatService
        from app.services.rag_service import RAGService
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat —Å–µ—Ä–≤–∏—Å
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChatService...")
        gigachat_service = GigaChatService()
        
        print(f"   üîß –ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if gigachat_service.client else '‚ùå'}")
        print(f"   üåê –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {'‚úÖ' if gigachat_service.is_available else '‚ùå'}")
        
        if gigachat_service.is_available:
            test_result = gigachat_service.test_embeddings("–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞")
            print(f"   üß† –¢–µ—Å—Ç embeddings: {'‚úÖ' if test_result['success'] else '‚ùå'}")
            if not test_result['success']:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {test_result['error']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAGService...")
        rag_service = RAGService()
        
        print(f"   üîß –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if rag_service.is_available else '‚ùå'}")
        if rag_service.embedding_provider:
            provider_type = type(rag_service.embedding_provider).__name__
            print(f"   üß† –ü—Ä–æ–≤–∞–π–¥–µ—Ä embeddings: {provider_type}")
        else:
            print("   ‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä embeddings –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GigaChat –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ")
    print("=" * 50)
    
    all_tests_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    certs_ok = check_certificates()
    all_tests_passed &= certs_ok
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if certs_ok:
        connection_ok = test_gigachat_connection()
        all_tests_passed &= connection_ok
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ langchain
        langchain_ok = test_langchain_gigachat()
        all_tests_passed &= langchain_ok
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_ok = test_services()
        all_tests_passed &= services_ok
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    print("\n" + "=" * 50)
    if all_tests_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    
    return 0 if all_tests_passed else 1

if __name__ == "__main__":
    exit(main())