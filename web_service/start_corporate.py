#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã
–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å GigaChat –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def check_corporate_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    cert_path = "../certificates/cert.pem"
    key_path = "../certificates/key.pem"
    
    if not os.path.exists(cert_path):
        logger.error(f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {cert_path}")
        return False
    
    if not os.path.exists(key_path):
        logger.error(f"‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(cert_path, 'r') as f:
        cert_content = f.read()
        if "# Certificate Placeholder" in cert_content:
            logger.error("‚ùå –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
            return False
    
    with open(key_path, 'r') as f:
        key_content = f.read()
        if "# Private Key Placeholder" in key_content:
            logger.error("‚ùå –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ –∫–ª—é—á–∞")
            return False
    
    logger.info("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    return True

def setup_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã"""
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    os.environ["GIGACHAT_BASE_URL"] = "https://gigachat-ift.sberdevices.delta.sbrf.ru/v1"
    os.environ["GIGACHAT_EMBEDDING_MODEL"] = "EmbeddingsGigaR"
    os.environ["MTLS_VERIFY_SSL"] = "false"  # –í –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∞—Ç—å
    
    # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if "FALLBACK_EMBEDDINGS" in os.environ:
        del os.environ["FALLBACK_EMBEDDINGS"]
    
    logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã")

def import_and_check_services():
    """–ò–º–ø–æ—Ä—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        from app.services.gigachat_service import GigaChatService
        from app.services.rag_service import RAGService
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat —Å–µ—Ä–≤–∏—Å
        gigachat_service = GigaChatService()
        
        if not gigachat_service.is_available:
            logger.error("‚ùå GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return None, None
        
        if not gigachat_service.client:
            logger.error("‚ùå GigaChat –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None, None
        
        logger.info("‚úÖ GigaChat —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
        try:
            rag_service = RAGService()
            
            if not rag_service.is_available:
                logger.error("‚ùå RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return gigachat_service, None
            
            if not rag_service.embedding_provider:
                logger.error("‚ùå Embedding –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return gigachat_service, None
            
            provider_type = type(rag_service.embedding_provider).__name__
            if "Simple" in provider_type:
                logger.error("‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤–º–µ—Å—Ç–æ GigaChat")
                return gigachat_service, None
            
            logger.info(f"‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {provider_type}")
            return gigachat_service, rag_service
            
        except RuntimeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
            return gigachat_service, None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return None, None

def start_application():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ...")
    
    try:
        import uvicorn
        from main import app
        
        logger.info("üåê –ó–∞–ø—É—Å–∫ web-—Å–µ—Ä–≤–µ—Ä–∞...")
        uvicorn.run(
            app, 
            host="0.0.0.0", 
            port=8000,
            log_level="info"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üè¢ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ")
    logger.info("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å—Ä–µ–¥—É
    if not check_corporate_environment():
        logger.error("‚ùå –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞")
        return 1
    
    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_environment()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
    gigachat_service, rag_service = import_and_check_services()
    
    if not gigachat_service:
        logger.error("‚ùå GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        return 1
    
    if not rag_service:
        logger.error("‚ùå RAG —Å–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GigaChat embeddings")
        return 1
    
    logger.info("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ")
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if not start_application():
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())