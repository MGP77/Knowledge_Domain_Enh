#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è web-—Å–µ—Ä–≤–∏—Å–∞ —Å GigaChat –∏ RAG

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

import os
import json
import logging
from datetime import datetime
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Request, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from app.services.gigachat_service import GigaChatService
from app.services.rag_service import RAGService
from app.services.confluence_service import ConfluenceService
from app.services.file_service import FileProcessorService

# –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
from app.utils.websocket_logger import setup_websocket_logging, get_websocket_handler

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from app.models.schemas import (
    ChatMessage, ChatResponse, ConfluenceConfig, 
    ConfluenceParseRequest, DocumentUploadResponse, AdminStats
)

from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=config.APP_NAME,
    version=config.APP_VERSION,
    description="Web-—Å–µ—Ä–≤–∏—Å —Å GigaChat –∏ RAG –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
gigachat_service = GigaChatService()
rag_service = RAGService()
confluence_service = ConfluenceService()
file_service = FileProcessorService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞)
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "SAMEORIGIN"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    return response

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_websocket_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ web-—Å–µ—Ä–≤–∏—Å–∞...")
    logger.info(f"üìä GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω: {gigachat_service.check_availability()}")
    logger.info(f"üìä RAG —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {rag_service.check_availability()}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(config.UPLOAD_FOLDER, exist_ok=True)

# =============================================================================
# HEALTH ENDPOINTS (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ)
# =============================================================================

@app.get("/health")
async def simple_health():
    """–ü—Ä–æ—Å—Ç–æ–π health check –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥"""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

# =============================================================================
# WEB PAGES
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "app_name": config.APP_NAME,
        "gigachat_available": gigachat_service.check_availability(),
        "rag_available": rag_service.check_availability()
    })

@app.get("/admin", response_class=HTMLResponse)
async def admin_panel(request: Request):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    stats = await get_admin_stats()
    return templates.TemplateResponse("admin.html", {
        "request": request,
        "app_name": config.APP_NAME,
        "stats": stats.dict()
    })

@app.post("/api/chat", response_model=ChatResponse)
async def chat_endpoint(message: ChatMessage):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ —Å GigaChat"""
    try:
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {message.message[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat
        if not gigachat_service.check_availability():
            raise HTTPException(
                status_code=503, 
                detail="GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        context = ""
        sources = []
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω RAG, –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if message.use_rag and rag_service.check_availability():
            search_results = rag_service.search(message.message)
            if search_results:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                context_parts = []
                for result in search_results:
                    context_parts.append(result['text'])
                    sources.append({
                        'text': result['text'][:200] + "...",
                        'metadata': result['metadata'],
                        'score': result['score']
                    })
                
                context = "\n\n".join(context_parts)
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
        response_text = await gigachat_service.chat_with_context(message.message, context)
        
        return ChatResponse(
            response=response_text,
            sources=sources,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/confluence/test")
async def test_confluence_connection(config_data: ConfluenceConfig):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Confluence"""
    try:
        result = confluence_service.test_connection(config_data)
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Confluence: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/confluence/parse")
async def parse_confluence(request: ConfluenceParseRequest):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü Confluence –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ RAG"""
    try:
        if not rag_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Confluence...")
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages = confluence_service.parse_confluence_pages(
            request.config, 
            request.max_pages
        )
        
        if not pages:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Confluence",
                "processed_pages": 0
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG –±–∞–∑—É
        processed_count = 0
        for page in pages:
            if page['content']:
                metadata = {
                    'source': 'confluence',
                    'page_id': page['id'],
                    'title': page['title'],
                    'space_key': page['space_key'],
                    'space_name': page['space_name'],
                    'url': page['url'],
                    'version': page['version'],
                    'author': page['author'],
                    'last_modified': page['last_modified']
                }
                
                if rag_service.add_document(page['content'], metadata):
                    processed_count += 1
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å—Ç—Ä–∞–Ω–∏—Ü Confluence")
        
        return {
            "success": True,
            "message": f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å—Ç—Ä–∞–Ω–∏—Ü",
            "processed_pages": processed_count,
            "total_found": len(pages)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Confluence: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/upload", response_model=DocumentUploadResponse)
async def upload_file(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file.filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG —Å–µ—Ä–≤–∏—Å–∞
        if not rag_service.check_availability():
            logger.warning("‚ö†Ô∏è RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            return DocumentUploadResponse(
                filename=file.filename,
                size=0,
                status="warning",
                message="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã. –§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.",
                processed_chunks=0
            )
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if len(file_content) == 0:
            return DocumentUploadResponse(
                filename=file.filename,
                size=0,
                status="error",
                message="–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = file_service.save_uploaded_file(file_content, file.filename)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        processing_result = file_service.process_file(file_path)
        
        if not processing_result['success']:
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="error",
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {processing_result['error']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG –±–∞–∑—É
        success = rag_service.add_document(
            processing_result['content'],
            processing_result['metadata']
        )
        
        if success:
            logger.info(f"‚úÖ –§–∞–π–ª {file.filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="success",
                message="–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
                processed_chunks=1  # TODO: –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
            )
        else:
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="error",
                message="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat."
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
        return DocumentUploadResponse(
            filename=file.filename if file.filename else "unknown",
            size=0,
            status="error",
            message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )

@app.get("/api/admin/stats", response_model=AdminStats)
async def get_admin_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        rag_stats = rag_service.get_stats()
        
        return AdminStats(
            total_documents=rag_stats.get('unique_documents', 0),
            total_chunks=rag_stats.get('total_chunks', 0),
            confluence_pages=0,  # TODO: –ø–æ–¥—Å—á–µ—Ç Confluence —Å—Ç—Ä–∞–Ω–∏—Ü
            uploaded_files=0,    # TODO: –ø–æ–¥—Å—á–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            last_update=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/admin/models")
async def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GigaChat"""
    try:
        models = gigachat_service.get_available_models()
        current_model = gigachat_service.get_current_model()
        
        return {
            "models": models,
            "current_model": current_model,
            "available": gigachat_service.check_availability()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/admin/models/set")
async def set_model(model_name: str = Form(...)):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ GigaChat"""
    try:
        if not gigachat_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        success = gigachat_service.set_model(model_name)
        
        if success:
            return {
                "success": True,
                "message": f"–ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                "current_model": gigachat_service.get_current_model()
            }
        else:
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/admin/clear-db")
async def clear_database():
    """–û—á–∏—Å—Ç–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not rag_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        success = rag_service.clear_database()
        
        if success:
            return {"success": True, "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞"}
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.websocket("/ws/logs")
async def websocket_logs(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    # –ü–æ–ª—É—á–∞–µ–º WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    ws_handler = get_websocket_handler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ws_handler.add_connection(websocket)
    
    try:
        logger.info("üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = {
            "timestamp": datetime.now().strftime("%H:%M:%S.%f")[:-3],
            "level": "INFO",
            "logger": "websocket",
            "message": "üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤...",
            "module": "",
            "funcName": "",
            "lineno": 0
        }
        await websocket.send_text(json.dumps(welcome_msg))
        
        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ø–∏–Ω–≥)
                await websocket.receive_text()
            except WebSocketDisconnect:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
                break
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket –ª–æ–≥–æ–≤: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws_handler.remove_connection(websocket)

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return {
        "status": "ok",
        "services": {
            "gigachat": gigachat_service.check_availability(),
            "rag": rag_service.check_availability()
        },
        "timestamp": datetime.now()
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=config.HOST,
        port=config.PORT,
        reload=config.DEBUG
    )
