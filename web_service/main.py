#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è web-—Å–µ—Ä–≤–∏—Å–∞ —Å GigaChat –∏ RAG

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

# –í–ê–ñ–ù–û: –û–±—Ö–æ–¥–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è SQLite –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö
# –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ SQLite –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
import sys
import os
import warnings

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–µ—Ä—Å–∏–∏ SQLite
warnings.filterwarnings("ignore", message=".*sqlite3.*version.*")
warnings.filterwarnings("ignore", message=".*SQLite.*version.*")
warnings.filterwarnings("ignore", category=UserWarning, module="chromadb")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–±—Ö–æ–¥–∞ SQLite
if os.getenv('CHROMA_SQLITE_OVERRIDE') == '1':
    print("üîß –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SQLite –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã")
    
    # Monkey patch –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ SQLite –≤ ChromaDB
    try:
        import sqlite3
        original_version = sqlite3.sqlite_version
        
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é SQLite –¥–ª—è –æ–±–º–∞–Ω–∞ ChromaDB
        sqlite3.sqlite_version = "3.35.0"
        sqlite3.version = "2.6.0"
        
        print(f"‚úÖ SQLite –≤–µ—Ä—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞: {original_version} -> {sqlite3.sqlite_version}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–∞—Ç—á–∏–º sqlite3.sqlite_version_info –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(sqlite3, 'sqlite_version_info'):
            sqlite3.sqlite_version_info = (3, 35, 0)
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è SQLite –ø–∞—Ç—á–∞: {e}")
        print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–∞—Ç—á–∞...")

import json
import logging
from datetime import datetime
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Request, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from app.services.gigachat_service import GigaChatService
from app.services.rag_service import RAGService
from app.services.confluence_service import ConfluenceService
from app.services.file_service import FileProcessorService

# –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
from app.utils.websocket_logger import setup_websocket_logging, get_websocket_handler

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from app.models.schemas import (
    ChatMessage, ChatResponse, ConfluenceConfig, 
    ConfluenceParseRequest, DocumentUploadResponse, AdminStats
)

from config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=config.APP_NAME,
    version=config.APP_VERSION,
    description="Web-—Å–µ—Ä–≤–∏—Å —Å GigaChat –∏ RAG –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
gigachat_service = GigaChatService()
rag_service = RAGService()
confluence_service = ConfluenceService()
file_service = FileProcessorService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="app/static"), name="static")
templates = Jinja2Templates(directory="app/templates")

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞)
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "SAMEORIGIN"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    return response

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_websocket_logging()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ web-—Å–µ—Ä–≤–∏—Å–∞...")
    logger.info(f"üìä GigaChat –¥–æ—Å—Ç—É–ø–µ–Ω: {gigachat_service.check_availability()}")
    logger.info(f"üìä RAG —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {rag_service.check_availability()}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(config.UPLOAD_FOLDER, exist_ok=True)

# =============================================================================
# HEALTH ENDPOINTS (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ)
# =============================================================================

@app.get("/health")
async def simple_health():
    """–ü—Ä–æ—Å—Ç–æ–π health check –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥"""
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

# =============================================================================
# WEB PAGES
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç–æ–º"""
    return templates.TemplateResponse("index.html", {
        "request": request,
        "app_name": config.APP_NAME,
        "gigachat_available": gigachat_service.check_availability(),
        "rag_available": rag_service.check_availability()
    })

@app.get("/admin", response_class=HTMLResponse)
async def admin_panel(request: Request):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    stats = await get_admin_stats()
    return templates.TemplateResponse("admin.html", {
        "request": request,
        "app_name": config.APP_NAME,
        "stats": stats.dict()
    })

@app.get("/manual", response_class=HTMLResponse)
async def manual_page(request: Request):
    """–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return templates.TemplateResponse("manual_ru.html", {
        "request": request,
        "app_name": config.APP_NAME
    })

@app.post("/api/chat", response_model=ChatResponse)
async def chat_endpoint(message: ChatMessage):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —á–∞—Ç–∞ —Å GigaChat"""
    try:
        logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {message.message[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat
        if not gigachat_service.check_availability():
            raise HTTPException(
                status_code=503, 
                detail="GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        context = ""
        sources = []
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω RAG, –∏—â–µ–º –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if message.use_rag and rag_service.check_availability():
            search_results = rag_service.search(message.message)
            if search_results:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                context_parts = []
                for result in search_results:
                    context_parts.append(result['text'])
                    sources.append({
                        'text': result['text'][:200] + "...",
                        'metadata': result['metadata'],
                        'score': result['score']
                    })
                
                context = "\n\n".join(context_parts)
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
        response_text = await gigachat_service.chat_with_context(message.message, context)
        
        return ChatResponse(
            response=response_text,
            sources=sources,
            timestamp=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/confluence/test")
async def test_confluence_connection(config_data: ConfluenceConfig):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Confluence"""
    try:
        result = confluence_service.test_connection(config_data)
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Confluence: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/confluence/parse")
async def parse_confluence(request: ConfluenceParseRequest):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü Confluence –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ RAG"""
    try:
        if not rag_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        logger.info("üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Confluence...")
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages = confluence_service.parse_confluence_pages(
            request.config, 
            request.max_pages
        )
        
        if not pages:
            return {
                "success": False,
                "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Confluence",
                "processed_pages": 0
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG –±–∞–∑—É
        processed_count = 0
        chunks_added = 0
        for page in pages:
            if page['content']:
                metadata = {
                    'source': 'confluence',
                    'page_id': page['id'],
                    'title': page['title'],
                    'space_key': page['space_key'],
                    'space_name': page['space_name'],
                    'url': page['url'],
                    'version': page['version'],
                    'author': page['author'],
                    'last_modified': page['last_modified']
                }
                
                add_result = rag_service.add_document(page['content'], metadata)
                if add_result["success"]:
                    processed_count += 1
                    chunks_added += add_result["chunks_added"]
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å—Ç—Ä–∞–Ω–∏—Ü Confluence ({chunks_added} —á–∞–Ω–∫–æ–≤)")
        
        return {
            "success": True,
            "message": f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Å—Ç—Ä–∞–Ω–∏—Ü ({chunks_added} —á–∞–Ω–∫–æ–≤)",
            "processed_pages": processed_count,
            "total_found": len(pages)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Confluence: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/upload", response_model=DocumentUploadResponse)
async def upload_file(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    try:
        logger.info(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file.filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RAG —Å–µ—Ä–≤–∏—Å–∞
        if not rag_service.check_availability():
            logger.warning("‚ö†Ô∏è RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ñ–∞–π–ª –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É")
            return DocumentUploadResponse(
                filename=file.filename,
                size=0,
                status="warning",
                message="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã. –§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.",
                processed_chunks=0
            )
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = await file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        if len(file_content) == 0:
            return DocumentUploadResponse(
                filename=file.filename,
                size=0,
                status="error",
                message="–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = file_service.save_uploaded_file(file_content, file.filename)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        processing_result = file_service.process_file(file_path)
        
        if not processing_result['success']:
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="error",
                message=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {processing_result['error']}"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ RAG –±–∞–∑—É
        add_result = rag_service.add_document(
            processing_result['content'],
            processing_result['metadata']
        )
        
        if add_result["success"]:
            logger.info(f"‚úÖ –§–∞–π–ª {file.filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π ({add_result['chunks_added']} —á–∞–Ω–∫–æ–≤)")
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="success",
                message=f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π ({add_result['chunks_added']} —á–∞–Ω–∫–æ–≤)",
                processed_chunks=add_result["chunks_added"]
            )
        else:
            error_msg = add_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            return DocumentUploadResponse(
                filename=file.filename,
                size=len(file_content),
                status="error",
                message=f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {error_msg}",
                processed_chunks=0
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
        return DocumentUploadResponse(
            filename=file.filename if file.filename else "unknown",
            size=0,
            status="error",
            message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        )

@app.get("/api/admin/stats", response_model=AdminStats)
async def get_admin_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        rag_stats = rag_service.get_stats()
        
        return AdminStats(
            total_documents=rag_stats.get('unique_documents', 0),
            total_chunks=rag_stats.get('total_chunks', 0),
            confluence_pages=rag_stats.get('confluence_pages', 0),
            uploaded_files=rag_stats.get('uploaded_files', 0),
            last_update=datetime.now()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/admin/models")
async def get_available_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π GigaChat"""
    try:
        models = gigachat_service.get_available_models()
        current_model = gigachat_service.get_current_model()
        
        return {
            "models": models,
            "current_model": current_model,
            "available": gigachat_service.check_availability()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/admin/models/set")
async def set_model(model_name: str = Form(...)):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ GigaChat"""
    try:
        if not gigachat_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="GigaChat —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        success = gigachat_service.set_model(model_name)
        
        if success:
            return {
                "success": True,
                "message": f"–ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                "current_model": gigachat_service.get_current_model()
            }
        else:
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/admin/clear-db")
async def clear_database():
    """–û—á–∏—Å—Ç–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not rag_service.check_availability():
            raise HTTPException(
                status_code=503,
                detail="RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        success = rag_service.clear_database()
        
        if success:
            return {"success": True, "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞"}
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# =============================================================================
# MAINTENANCE AND DIAGNOSTICS API ENDPOINTS
# =============================================================================

@app.post("/api/admin/diagnostics")
async def run_diagnostics():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ChromaDB
        chromadb_status = "OK" if rag_service.check_availability() else "ERROR"
        chromadb_info = {"status": chromadb_status}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            import os
            db_path = config.CHROMA_DB_PATH
            if os.path.exists(db_path):
                size_bytes = sum(os.path.getsize(os.path.join(dirpath, filename))
                               for dirpath, dirnames, filenames in os.walk(db_path)
                               for filename in filenames)
                chromadb_info["size_mb"] = round(size_bytes / (1024 * 1024), 2)
            else:
                chromadb_info["size_mb"] = 0.0
        except Exception:
            chromadb_info["size_mb"] = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º embedding —Å–µ—Ä–≤–∏—Å  
        embedding_basic_check = gigachat_service.check_availability()
        embedding_test_result = gigachat_service.test_embeddings("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        
        if embedding_test_result.get("success", False):
            embedding_status = "OK"
            embedding_error = None
        else:
            embedding_status = "ERROR"
            embedding_error = embedding_test_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        
        embedding_info = {
            "status": embedding_status,
            "model": config.GIGACHAT_EMBEDDING_MODEL,
            "basic_available": embedding_basic_check,
            "error": embedding_error
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        stats = rag_service.get_statistics()
        documents_info = {
            "total": stats.get("total_documents", 0),
            "chunks": stats.get("total_chunks", 0)
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if chromadb_status != "OK":
            recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ChromaDB")
        if embedding_status != "OK":
            if embedding_error:
                recommendations.append(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat Embeddings: {embedding_error}")
            else:
                recommendations.append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat Embeddings")
        
        db_size = chromadb_info.get("size_mb", 0.0)
        if isinstance(db_size, (int, float)) and db_size > 500:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        if documents_info["total"] == 0:
            recommendations.append("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É")
        
        return {
            "success": True,
            "data": {
                "chromadb": chromadb_info,
                "embedding": embedding_info,
                "documents": documents_info,
                "recommendations": recommendations
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}"}

@app.get("/api/admin/embedding-health")
async def check_embedding_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è embedding –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        start_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        basic_available = gigachat_service.check_availability()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º embedding
        test_result = gigachat_service.test_embeddings("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        end_time = datetime.now()
        response_time = int((end_time - start_time).total_seconds() * 1000)
        
        if test_result.get("success", False):
            vector_dimensions = len(test_result.get("embedding", []))
            
            return {
                "success": True,
                "data": {
                    "model": config.GIGACHAT_EMBEDDING_MODEL,
                    "response_time": response_time,
                    "vector_dimensions": vector_dimensions,
                    "status": "healthy",
                    "basic_available": basic_available
                }
            }
        else:
            error_details = test_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            return {
                "success": False,
                "message": f"Embedding –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_details}",
                "data": {
                    "basic_available": basic_available,
                    "response_time": response_time,
                    "error": error_details,
                    "model": config.GIGACHAT_EMBEDDING_MODEL
                }
            }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ embedding: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@app.get("/api/admin/gigachat-debug")
async def debug_gigachat():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GigaChat –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        debug_info = {
            "client_initialized": gigachat_service.client is not None,
            "mtls_cert_path": config.MTLS_CLIENT_CERT,
            "mtls_key_path": config.MTLS_CLIENT_KEY,
            "embedding_model": config.GIGACHAT_EMBEDDING_MODEL,
            "base_url": config.GIGACHAT_BASE_URL,
            "mtls_verify_ssl": config.MTLS_VERIFY_SSL
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        import os
        cert_path = config.MTLS_CLIENT_CERT
        key_path = config.MTLS_CLIENT_KEY
        
        debug_info["cert_file_exists"] = os.path.exists(cert_path)
        debug_info["key_file_exists"] = os.path.exists(key_path)
        
        if debug_info["cert_file_exists"]:
            debug_info["cert_file_size"] = os.path.getsize(cert_path)
        if debug_info["key_file_exists"]:
            debug_info["key_file_size"] = os.path.getsize(key_path)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        debug_info["basic_availability"] = gigachat_service.check_availability()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º embedding —Å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
        if debug_info["basic_availability"]:
            test_result = gigachat_service.test_embeddings("–¢–µ—Å—Ç")
            debug_info["embedding_test"] = test_result
        else:
            debug_info["embedding_test"] = {"success": False, "error": "–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞"}
        
        return {"success": True, "debug_info": debug_info}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ GigaChat: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {str(e)}"}

@app.get("/api/admin/validate-db")
async def validate_database():
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ChromaDB"""
    try:
        if not rag_service.check_availability():
            return {"success": False, "message": "ChromaDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = rag_service.get_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import os
        db_path = config.CHROMA_DB_PATH
        size_mb = 0.0
        if os.path.exists(db_path):
            size_bytes = sum(os.path.getsize(os.path.join(dirpath, filename))
                           for dirpath, dirnames, filenames in os.walk(db_path)
                           for filename in filenames)
            size_mb = round(size_bytes / (1024 * 1024), 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections_count = 1  # –£ –Ω–∞—Å –æ–¥–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        return {
            "success": True,
            "data": {
                "collections_count": collections_count,
                "documents_count": stats.get("total_documents", 0),
                "index_status": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (HNSW)",
                "size_mb": size_mb,
                "chunks_count": stats.get("total_chunks", 0)
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ë–î: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"}

@app.get("/api/admin/maintenance-check")
async def check_maintenance_needs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –º–æ–¥—É–ª—è
        # ChromaDB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å–∞–º–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã
        import os
        db_path = config.CHROMA_DB_PATH
        size_mb = 0.0
        if os.path.exists(db_path):
            size_bytes = sum(os.path.getsize(os.path.join(dirpath, filename))
                           for dirpath, dirnames, filenames in os.walk(db_path)
                           for filename in filenames)
            size_mb = round(size_bytes / (1024 * 1024), 2)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "reindexing_needed": False,
            "automatic_optimization": True,
            "maintenance_type": "monitoring_only",
            "recommendations": "ChromaDB –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å–∞–º–∏. –†–µ-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
            "database_size_mb": size_mb
        }
        
        if size_mb > 500:
            result["recommendations"] += " –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–æ–ª—å—à–∞—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."
        
        return {"success": True, "data": result}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@app.get("/api/admin/export-metadata")
async def export_database_metadata():
    """–≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not rag_service.check_availability():
            return {"success": False, "message": "RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = rag_service.get_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            "export_date": datetime.now().isoformat(),
            "database_stats": stats,
            "configuration": {
                "chunk_size": config.CHUNK_SIZE,
                "chunk_overlap": config.CHUNK_OVERLAP,
                "embedding_model": config.GIGACHAT_EMBEDDING_MODEL,
                "max_search_results": config.MAX_SEARCH_RESULTS
            },
            "system_info": {
                "app_version": config.APP_VERSION,
                "db_path": config.CHROMA_DB_PATH
            }
        }
        
        return {"success": True, "data": metadata}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}"}

@app.get("/api/admin/document-sources")
async def get_document_sources():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        if not rag_service.check_availability():
            return {"success": False, "message": "RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        sources_info = rag_service.get_sources_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        sources = []
        
        confluence_count = sources_info.get("confluence_pages", 0)
        if confluence_count > 0:
            sources.append({
                "source_type": "Confluence",
                "count": confluence_count,
                "details": f"–°—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤"
            })
        
        uploaded_count = sources_info.get("uploaded_files", 0)
        if uploaded_count > 0:
            sources.append({
                "source_type": "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
                "count": uploaded_count,
                "details": f"PDF, DOCX, TXT —Ñ–∞–π–ª—ã"
            })
        
        if not sources:
            sources.append({
                "source_type": "–ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
                "count": 0,
                "details": "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
            })
        
        return {"success": True, "data": {"sources": sources}}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@app.get("/api/admin/chunk-analysis")
async def analyze_chunk_distribution():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"""
    try:
        if not rag_service.check_availability():
            return {"success": False, "message": "RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        analysis = rag_service.analyze_chunks()
        
        return {"success": True, "data": analysis}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"}

@app.get("/api/admin/embedding-compatibility")
async def check_embedding_compatibility():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    try:
        compatibility = rag_service.check_embedding_dimension_compatibility()
        return {"success": True, "data": compatibility}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {str(e)}"}

@app.post("/api/admin/migrate-embeddings")
async def migrate_embeddings(force: bool = False):
    """–ú–∏–≥—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏"""
    try:
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (force={force})")
        
        migration_result = rag_service.migrate_embedding_dimensions(force=force)
        
        if migration_result.get("success"):
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {migration_result.get('message')}")
        
        return {"success": True, "data": migration_result}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}"}

@app.websocket("/ws/logs")
async def websocket_logs(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    
    # –ü–æ–ª—É—á–∞–µ–º WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    ws_handler = get_websocket_handler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ws_handler.add_connection(websocket)
    
    try:
        logger.info("üîå –ù–æ–≤–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = {
            "timestamp": datetime.now().strftime("%H:%M:%S.%f")[:-3],
            "level": "INFO",
            "logger": "websocket",
            "message": "üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤...",
            "module": "",
            "funcName": "",
            "lineno": 0
        }
        await websocket.send_text(json.dumps(welcome_msg))
        
        # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ø–∏–Ω–≥)
                await websocket.receive_text()
            except WebSocketDisconnect:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
                break
                
    except WebSocketDisconnect:
        logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket –ª–æ–≥–æ–≤: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        ws_handler.remove_connection(websocket)

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    return {
        "status": "ok",
        "services": {
            "gigachat": gigachat_service.check_availability(),
            "rag": rag_service.check_availability()
        },
        "timestamp": datetime.now()
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=config.HOST,
        port=config.PORT,
        reload=config.DEBUG
    )
