#!/bin/bash

# =============================================================================
# SberInfra Knowledge System - Production Run Script
# =============================================================================
# –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å—Ä–µ–¥—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
# =============================================================================

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME="SberInfra Knowledge System"
APP_PORT=8005
APP_HOST="0.0.0.0"
PID_FILE="knowledge_system.pid"
LOG_FILE="knowledge_system.log"
REQUIREMENTS_FILE="requirements.txt"
PYTHON_CMD="python"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
check_python() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...${NC}"
    
    if command -v python3 &> /dev/null; then
        PYTHON_CMD="python3"
    elif command -v python &> /dev/null; then
        PYTHON_CMD="python"
    else
        echo -e "${RED}‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+${NC}"
        exit 1
    fi
    
    PYTHON_VERSION=$($PYTHON_CMD --version 2>&1 | cut -d' ' -f2)
    echo -e "${GREEN}‚úÖ Python –Ω–∞–π–¥–µ–Ω: $PYTHON_VERSION${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ pip
check_pip() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ pip...${NC}"
    
    if ! command -v pip &> /dev/null; then
        if ! command -v pip3 &> /dev/null; then
            echo -e "${RED}‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ pip –Ω–∞–π–¥–µ–Ω${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –≤–µ—Ä—Å–∏–∏ –¥–ª—è ChromaDB
check_sqlite() {
    echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –¥–ª—è ChromaDB...${NC}"
    
    SQLITE_VERSION=$($PYTHON_CMD -c "import sqlite3; print(sqlite3.sqlite_version)" 2>/dev/null || echo "unknown")
    echo -e "${CYAN}üìä –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è SQLite: $SQLITE_VERSION${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é SQLite (—Ç—Ä–µ–±—É–µ—Ç—Å—è >= 3.35.0)
    REQUIRED_VERSION="3.35.0"
    if $PYTHON_CMD -c "
import sqlite3
import sys
current = tuple(map(int, sqlite3.sqlite_version.split('.')))
required = tuple(map(int, '$REQUIRED_VERSION'.split('.')))
sys.exit(0 if current >= required else 1)
" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ SQLite –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ChromaDB${NC}"
        return 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è SQLite –≤–µ—Ä—Å–∏—è $SQLITE_VERSION < $REQUIRED_VERSION${NC}"
        echo -e "${YELLOW}üì¶ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è SQLite –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏${NC}"
        return 1
    fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    
    if [ ! -f "$REQUIREMENTS_FILE" ]; then
        echo -e "${RED}‚ùå –§–∞–π–ª $REQUIREMENTS_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π ChromaDB
    if ! check_sqlite; then
        echo -e "${YELLOW}ÔøΩ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ SQLite...${NC}"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pysqlite3-binary –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ SQLite
        pip install pysqlite3-binary
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—á –¥–ª—è ChromaDB —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pysqlite3
        echo -e "${YELLOW}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ChromaDB –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ SQLite...${NC}"
        
        # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ç—á–∞ SQLite
        mkdir -p ./sqlite_patch
        cat > ./sqlite_patch/__init__.py << 'EOF'
"""
–ü–∞—Ç—á –¥–ª—è –∑–∞–º–µ–Ω—ã sqlite3 –Ω–∞ pysqlite3-binary –≤ ChromaDB
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ä–µ–¥–∞—Ö —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ SQLite
"""
# –ó–∞–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π sqlite3 –Ω–∞ pysqlite3-binary
import sys
try:
    import pysqlite3 as sqlite3
    sys.modules['sqlite3'] = sqlite3
    print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π SQLite —á–µ—Ä–µ–∑ pysqlite3-binary")
except ImportError:
    import sqlite3
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π SQLite")
EOF
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º ChromaDB
        export PYTHONPATH="./sqlite_patch:$PYTHONPATH"
        
        echo -e "${GREEN}‚úÖ SQLite –ø–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω${NC}"
    fi
    
    echo -e "${YELLOW}ÔøΩüìã –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –∏–∑ $REQUIREMENTS_FILE...${NC}"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    if pip install -r "$REQUIREMENTS_FILE"; then
        echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...${NC}"
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö –≤–µ—Ä—Å–∏–π
        pip install --upgrade pip
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pysqlite3-binary –ø–µ—Ä–µ–¥ ChromaDB
        pip install pysqlite3-binary
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
        pip install fastapi uvicorn jinja2 python-multipart requests pypdf2 python-docx beautifulsoup4 typing-extensions pydantic aiofiles python-dotenv websockets
        
        # ChromaDB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ SQLite
        pip install chromadb
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GigaChat (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥–µ)
        pip install langchain-gigachat || echo -e "${YELLOW}‚ö†Ô∏è GigaChat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ${NC}"
        
        # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ python-magic (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å)
        pip install python-magic || echo -e "${YELLOW}‚ö†Ô∏è python-magic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback${NC}"
        
        echo -e "${GREEN}‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${NC}"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    echo -e "${BLUE}‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f ".env" ]; then
        if [ -f ".env.example" ]; then
            echo -e "${YELLOW}üìù –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞...${NC}"
            cp .env.example .env
        else
            echo -e "${YELLOW}üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞...${NC}"
            cat > .env << EOF
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
APP_NAME="SberInfra Knowledge System"
APP_VERSION="1.0.0"
HOST=0.0.0.0
PORT=8005
DEBUG=False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GigaChat (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
GIGACHAT_BASE_URL=https://gigachat.devices.sberbank.ru/api/v1
GIGACHAT_MODEL=GigaChat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChromaDB
CHROMA_DB_PATH=./storage/chroma_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=INFO
EOF
        fi
        echo -e "${GREEN}‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω${NC}"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p storage/chroma_db
    mkdir -p storage/uploads
    
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
check_port() {
    echo -e "${BLUE}üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ $APP_PORT...${NC}"
    
    if lsof -Pi :$APP_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü–æ—Ä—Ç $APP_PORT —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è${NC}"
        PID=$(lsof -Pi :$APP_PORT -sTCP:LISTEN -t)
        echo -e "${YELLOW}PID –ø—Ä–æ—Ü–µ—Å—Å–∞: $PID${NC}"
        
        read -p "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            kill $PID || true
            sleep 2
        else
            echo -e "${RED}‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –∑–∞–Ω—è—Ç–æ–º –ø–æ—Ä—Ç—É${NC}"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç $APP_PORT —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
start_service() {
    echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ $APP_NAME...${NC}"
    
    check_port
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    nohup $PYTHON_CMD main.py > $LOG_FILE 2>&1 &
    SERVICE_PID=$!
    echo $SERVICE_PID > $PID_FILE
    
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω!${NC}"
    echo -e "${GREEN}üìä PID: $SERVICE_PID${NC}"
    echo -e "${GREEN}üåê URL: http://localhost:$APP_PORT${NC}"
    echo -e "${GREEN}üñ•Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:$APP_PORT/admin${NC}"
    echo -e "${GREEN}üìã –õ–æ–≥–∏: tail -f $LOG_FILE${NC}"
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    echo -e "${YELLOW}‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    if kill -0 $SERVICE_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HTTP
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:$APP_PORT/ | grep -q "200"; then
            echo -e "${GREEN}üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è HTTP —Å–µ—Ä–≤–µ—Ä –ø–æ–∫–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏${NC}"
        fi
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞!${NC}"
        echo -e "${RED}üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: cat $LOG_FILE${NC}"
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
stop_service() {
    echo -e "${BLUE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat $PID_FILE)
        if kill -0 $PID 2>/dev/null; then
            echo -e "${YELLOW}üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ $PID...${NC}"
            kill $PID
            sleep 3
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if kill -0 $PID 2>/dev/null; then
                echo -e "${YELLOW}üíÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...${NC}"
                kill -9 $PID
            fi
            
            echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
        fi
        rm -f $PID_FILE
    else
        echo -e "${YELLOW}‚ö†Ô∏è PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ –ø–æ—Ä—Ç—É
        if lsof -Pi :$APP_PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
            PID=$(lsof -Pi :$APP_PORT -sTCP:LISTEN -t)
            echo -e "${YELLOW}üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞ –ø–æ—Ä—Ç—É $APP_PORT: $PID${NC}"
            kill $PID || kill -9 $PID
            echo -e "${GREEN}‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        fi
    fi
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
restart_service() {
    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    stop_service
    sleep 2
    start_service
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
status_service() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    
    if [ -f "$PID_FILE" ]; then
        PID=$(cat $PID_FILE)
        if kill -0 $PID 2>/dev/null; then
            echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: $PID)${NC}"
            echo -e "${GREEN}üåê URL: http://localhost:$APP_PORT${NC}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if command -v curl &> /dev/null; then
                if curl -s -o /dev/null -w "%{http_code}" http://localhost:$APP_PORT/ | grep -q "200"; then
                    echo -e "${GREEN}üåê HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
                else
                    echo -e "${YELLOW}‚ö†Ô∏è HTTP —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
                fi
            fi
            
            return 0
        else
            echo -e "${RED}‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
            rm -f $PID_FILE
            return 1
        fi
    else
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
        return 1
    fi
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
show_logs() {
    echo -e "${BLUE}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤...${NC}"
    
    if [ -f "$LOG_FILE" ]; then
        if [ "$1" = "follow" ]; then
            echo -e "${YELLOW}üì∫ –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ª–æ–≥–∞–º–∏ (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞):${NC}"
            tail -f $LOG_FILE
        else
            echo -e "${YELLOW}üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:${NC}"
            tail -50 $LOG_FILE
        fi
    else
        echo -e "${RED}‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω${NC}"
    fi
}

# –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
full_install() {
    echo -e "${PURPLE}üéØ –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ $APP_NAME${NC}"
    echo -e "${PURPLE}==========================================${NC}"
    
    check_python
    check_pip
    install_dependencies
    check_config
    
    echo -e "${GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${GREEN}–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: $0 start${NC}"
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
show_help() {
    echo -e "${CYAN}üõ†Ô∏è SberInfra Knowledge System - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ${NC}"
    echo -e "${CYAN}==========================================${NC}"
    echo
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {–∫–æ–º–∞–Ω–¥–∞}${NC}"
    echo
    echo -e "${GREEN}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo -e "  ${BLUE}install${NC}    - –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
    echo -e "  ${BLUE}start${NC}      - –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
    echo -e "  ${BLUE}stop${NC}       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    echo -e "  ${BLUE}restart${NC}    - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"
    echo -e "  ${BLUE}status${NC}     - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo -e "  ${BLUE}logs${NC}       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo -e "  ${BLUE}logs-live${NC}  - –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –ª–æ–≥–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo -e "  ${BLUE}help${NC}       - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    echo
    echo -e "${GREEN}üåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ:${NC}"
    echo -e "  ‚Ä¢ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:$APP_PORT"
    echo -e "  ‚Ä¢ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:$APP_PORT/admin"
    echo -e "  ‚Ä¢ –ö–æ–Ω—Å–æ–ª—å –ª–æ–≥–æ–≤: http://localhost:$APP_PORT/admin ‚Üí –≤–∫–ª–∞–¥–∫–∞ '–ö–æ–Ω—Å–æ–ª—å'"
    echo
    echo -e "${GREEN}üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:${NC}"
    echo -e "  $0 install     # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo -e "  $0 start       # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo -e "  $0 logs-live   # –°–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    install)
        full_install
        ;;
    start)
        if ! status_service >/dev/null 2>&1; then
            start_service
        else
            echo -e "${YELLOW}‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω${NC}"
            status_service
        fi
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart_service
        ;;
    status)
        status_service
        ;;
    logs)
        show_logs
        ;;
    logs-live)
        show_logs follow
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo
        show_help
        exit 1
        ;;
esac
