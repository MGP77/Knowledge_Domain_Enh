#!/usr/bin/env python3
"""
Flask –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã (–≤–º–µ—Å—Ç–æ FastAPI)

Copyright (c) 2025. All rights reserved.
Author: M.P.
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_cors import CORS
import logging
import os
import sys
from pathlib import Path
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
gigachat_service = None
rag_service = None
confluence_service = None
file_service = None

def init_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global gigachat_service, rag_service, confluence_service, file_service
    
    try:
        from config import config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat —Å–µ—Ä–≤–∏—Å–∞
        try:
            from app.services.gigachat_service import GigaChatService
            gigachat_service = GigaChatService()
            logger.info("‚úÖ GigaChat —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞  
        try:
            from app.services.rag_service import RAGService
            rag_service = RAGService()
            logger.info("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Confluence —Å–µ—Ä–≤–∏—Å–∞
        try:
            from app.services.confluence_service import ConfluenceService
            confluence_service = ConfluenceService()
            logger.info("‚úÖ Confluence —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Confluence: {e}")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è File —Å–µ—Ä–≤–∏—Å–∞
        try:
            from app.services.file_service import FileProcessorService
            file_service = FileProcessorService()
            logger.info("‚úÖ File —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ File service: {e}")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    gigachat_available = gigachat_service is not None and gigachat_service.is_available()
    rag_available = rag_service is not None and rag_service.is_available()
    
    return render_template('index.html', 
                         app_name="SberInfra Knowledge System",
                         gigachat_available=gigachat_available,
                         rag_available=rag_available)

@app.route('/admin')
def admin():
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    return render_template('admin.html',
                         app_name="SberInfra Knowledge System")

@app.route('/api/chat', methods=['POST'])
def chat():
    """API –¥–ª—è —á–∞—Ç–∞ —Å GigaChat"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        use_rag = data.get('use_rag', True)
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –ï—Å–ª–∏ GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not gigachat_service or not gigachat_service.is_available():
            return jsonify({
                'response': '‚ö†Ô∏è GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.',
                'sources': [],
                'timestamp': datetime.now().isoformat()
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ RAG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        context = ""
        sources = []
        
        if use_rag and rag_service and rag_service.is_available():
            try:
                search_results = rag_service.search(message, max_results=3)
                context = "\n".join([result['text'] for result in search_results])
                sources = [{'text': r['text'][:200] + '...', 'metadata': r['metadata']} 
                          for r in search_results]
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ RAG –ø–æ–∏—Å–∫–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat
        try:
            response = gigachat_service.generate_response(message, context)
            
            return jsonify({
                'response': response,
                'sources': sources,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ GigaChat: {e}")
            return jsonify({
                'response': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {str(e)}',
                'sources': [],
                'timestamp': datetime.now().isoformat()
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API —á–∞—Ç–∞: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/api/admin/stats')
def stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        gigachat_available = gigachat_service is not None and gigachat_service.is_available()
        rag_available = rag_service is not None and rag_service.is_available()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RAG
        rag_stats = {}
        if rag_service:
            try:
                rag_stats = rag_service.get_statistics()
            except:
                rag_stats = {
                    'total_chunks': 0,
                    'unique_documents': 0,
                    'status': 'unavailable'
                }
        
        return jsonify({
            'gigachat_available': gigachat_available,
            'rag_available': rag_available,
            'total_documents': rag_stats.get('unique_documents', 0),
            'total_chunks': rag_stats.get('total_chunks', 0),
            'embedding_provider': rag_stats.get('embedding_provider', 'N/A'),
            'embedding_model': rag_stats.get('embedding_model', 'N/A')
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'gigachat_available': False,
            'rag_available': False,
            'total_documents': 0,
            'total_chunks': 0,
            'error': str(e)
        })

@app.route('/api/confluence/test', methods=['POST'])
def test_confluence():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Confluence"""
    try:
        if not confluence_service:
            return jsonify({
                'success': False,
                'message': 'Confluence —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            })
        
        data = request.get_json()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        from app.models.schemas import ConfluenceConfig
        config = ConfluenceConfig(
            url=data['url'],
            username=data['username'],
            password=data['password']
        )
        
        result = confluence_service.test_connection(config)
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Confluence: {e}")
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}'
        })

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""
    return redirect(url_for('index'))

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–∫–∏"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {error}")
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ SberInfra Knowledge System (Flask –≤–µ—Ä—Å–∏—è)")
    print("üè¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ä–µ–¥–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ FastAPI")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    init_services()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    port = int(os.environ.get('PORT', 8005))
    host = os.environ.get('HOST', '0.0.0.0')
    debug = os.environ.get('DEBUG', 'false').lower() == 'true'
    
    print(f"üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{port}")
    print("üìù –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:{port}/admin")
    print("üîç –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host=host, port=port, debug=debug)
