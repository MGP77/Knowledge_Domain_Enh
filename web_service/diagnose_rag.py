#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ChromaDB
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–ø–∞–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ RAG
"""

import os
import sys
import json
from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append('.')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import config

def check_chroma_persistence():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ ChromaDB"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ChromaDB...")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç —Å –æ–±—Ö–æ–¥–æ–º SQLite (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if os.getenv('CHROMA_SQLITE_OVERRIDE') == '1':
            import sqlite3
            sqlite3.sqlite_version = "3.35.0"
            print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω –æ–±—Ö–æ–¥ SQLite –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å—Ä–µ–¥—ã")
        
        import chromadb
        from chromadb.config import Settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ
        db_path = config.CHROMA_DB_PATH
        print(f"üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        print(f"üìä –ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {config.CHROMA_COLLECTION_NAME}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.exists(db_path):
            print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–∞–∑—ã —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            files = os.listdir(db_path)
            print(f"üìÅ –§–∞–π–ª—ã –≤ –±–∞–∑–µ: {files}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
            for file in files:
                file_path = os.path.join(db_path, file)
                if os.path.isfile(file_path):
                    size = os.path.getsize(file_path)
                    print(f"   üìÑ {file}: {size} –±–∞–π—Ç")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–∞–∑—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
        client = chromadb.PersistentClient(
            path=db_path,
            settings=Settings(
                anonymized_telemetry=False,
                allow_reset=True
            )
        )
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        try:
            collection = client.get_collection(config.CHROMA_COLLECTION_NAME)
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {config.CHROMA_COLLECTION_NAME}")
        except Exception as e:
            print(f"‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}")
            print("üîß –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é...")
            collection = client.get_or_create_collection(config.CHROMA_COLLECTION_NAME)
            print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config.CHROMA_COLLECTION_NAME}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        count = collection.count()
        print(f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {count}")
        
        if count > 0:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            all_data = collection.get(include=["metadatas", "documents"])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            sources = {}
            confluence_pages = set()
            uploaded_files = set()
            
            for i, metadata in enumerate(all_data['metadatas']):
                source = metadata.get('source', 'unknown')
                timestamp = metadata.get('timestamp', 'unknown')
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
                if source not in sources:
                    sources[source] = []
                sources[source].append({
                    'index': i,
                    'timestamp': timestamp,
                    'metadata': metadata
                })
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Confluence –∏ —Ñ–∞–π–ª–æ–≤
                if source == 'confluence':
                    page_id = metadata.get('page_id', 'unknown')
                    page_title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    confluence_pages.add(f"{page_id}: {page_title}")
                elif source == 'file':
                    filename = metadata.get('filename', 'unknown')
                    uploaded_files.add(filename)
            
            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
            for source, items in sources.items():
                print(f"   {source}: {len(items)} —á–∞–Ω–∫–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                recent_items = sorted(items, key=lambda x: x.get('timestamp', ''), reverse=True)[:3]
                for item in recent_items:
                    timestamp = item['metadata'].get('timestamp', 'unknown')
                    title = item['metadata'].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"     - {title} ({timestamp})")
            
            print(f"\nüìÑ Confluence —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({len(confluence_pages)}):")
            for page in sorted(confluence_pages):
                print(f"   - {page}")
            
            print(f"\nüìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(uploaded_files)}):")
            for file in sorted(uploaded_files):
                print(f"   - {file}")
                
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            print(f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            recent_docs = []
            for i, metadata in enumerate(all_data['metadatas']):
                timestamp = metadata.get('timestamp', '')
                if timestamp:
                    recent_docs.append((timestamp, metadata, all_data['documents'][i][:100]))
            
            recent_docs.sort(reverse=True)
            for i, (timestamp, metadata, content_preview) in enumerate(recent_docs[:5]):
                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                source = metadata.get('source', 'unknown')
                print(f"   {i+1}. [{source}] {title} ({timestamp})")
                print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {content_preview}...")
                
        else:
            print("üì≠ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã: {e}")
        import traceback
        traceback.print_exc()

def check_rag_service_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG —Å–µ—Ä–≤–∏—Å–∞...")
    print("=" * 60)
    
    try:
        from app.services.rag_service import RAGService
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–µ—Ä–≤–∏—Å–∞
        rag = RAGService()
        
        print(f"üìä RAG —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω: {rag.is_available}")
        print(f"üîß Embedding –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {type(rag.embedding_provider).__name__ if rag.embedding_provider else 'None'}")
        
        if rag.is_available:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = rag.get_stats()
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG:")
            for key, value in stats.items():
                print(f"   {key}: {value}")
                
            # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            print(f"\nüîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...")
            results = rag.search("—Ç–µ—Å—Ç", n_results=3)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            for i, result in enumerate(results):
                metadata = result.get('metadata', {})
                title = metadata.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                source = metadata.get('source', 'unknown')
                score = result.get('score', 0)
                print(f"   {i+1}. [{source}] {title} (score: {score:.3f})")
        else:
            print("‚ùå RAG —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RAG —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()

def check_service_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤...")
    print("=" * 60)
    
    log_file = "knowledge_system.log"
    if os.path.exists(log_file):
        print(f"‚úÖ –õ–æ–≥ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {log_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–µ: {len(lines)}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
            print(f"\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:")
            for line in lines[-20:]:
                print(f"   {line.strip()}")
                
            # –ò—â–µ–º –æ—à–∏–±–∫–∏
            error_lines = [line for line in lines if 'ERROR' in line or 'Exception' in line]
            if error_lines:
                print(f"\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(error_lines)}):")
                for line in error_lines[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—à–∏–±–æ–∫
                    print(f"   {line.strip()}")
            else:
                print(f"\n‚úÖ –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
    else:
        print(f"‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"üïí –í—Ä–µ–º—è: {datetime.now()}")
    print(f"üîß Python: {sys.version}")
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"\nüåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    env_vars = ['CHROMA_SQLITE_OVERRIDE', 'DEBUG', 'GIGACHAT_MODEL']
    for var in env_vars:
        value = os.getenv(var, '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
        print(f"   {var}: {value}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_chroma_persistence()
    check_rag_service_status()
    check_service_logs()
    
    print(f"\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("=" * 60)

if __name__ == "__main__":
    main()